using System;
using System.Collections.Generic;
using System.Text;

namespace Katas
{
    public class kyu6MutalRecursion
    {
        // public static void Main(string[] args)
        // {
        //     var f = new[]
        //     {
        //         1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 13, 13, 14, 14, 15, 16, 16, 17, 17, 18,
        //         19, 19, 20, 21, 21, 22, 22, 23, 24, 24, 25, 25, 26, 27, 27, 28, 29, 29, 30, 30, 31, 32, 32, 33, 34, 34,
        //         35, 35, 36, 37, 37, 38, 38, 39, 40, 40, 41, 42, 42, 43, 43, 44, 45, 45, 46, 46, 47, 48, 48, 49, 50, 50,
        //         51, 51, 52, 53, 53, 54, 55, 55, 56, 56, 57, 58, 58, 59, 59, 60, 61, 61, 62, 63, 63, 64, 64, 65, 66, 66,
        //         67, 67, 68, 69, 69, 70, 71, 71, 72, 72, 73, 74, 74, 75, 76, 76, 77, 77, 78, 79, 79, 80, 80, 81, 82, 82,
        //         83, 84, 84, 85, 85, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 92, 93, 93, 94, 95, 95, 96, 97, 97, 98, 98,
        //         99, 100, 100, 101, 101, 102, 103, 103, 104, 105
        //     };
        //
        //     var m = new[]
        //     {
        //         0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 17, 18,
        //         19, 19, 20, 20, 21, 22, 22, 23, 24, 24, 25, 25, 26, 27, 27, 28, 29, 29, 30, 30, 31, 32, 32, 33, 33, 34,
        //         35, 35, 36, 37, 37, 38, 38, 39, 40, 40, 41, 42, 42, 43, 43, 44, 45, 45, 46, 46, 47, 48, 48, 49, 50, 50,
        //         51, 51, 52, 53, 53, 54, 54, 55, 56, 56, 57, 58, 58, 59, 59, 60, 61, 61, 62, 63, 63, 64, 64, 65, 66, 66,
        //         67, 67, 68, 69, 69, 70, 71, 71, 72, 72, 73, 74, 74, 75, 76, 76, 77, 77, 78, 79, 79, 80, 80, 81, 82, 82,
        //         83, 84, 84, 85, 85, 86, 87, 87, 88, 88, 89, 90, 90, 91, 92, 92, 93, 93, 94, 95, 95, 96, 97, 97, 98, 98,
        //         99, 100, 100, 101, 101, 102, 103, 103, 104, 105
        //     };
        //
        //
        //
        //     var test = new List<int>();
        //     for (var i = 0; i < 200; i++)
        //     {
        //         test.Add(M(i));
        //         // Console.WriteLine("F2(" + i + ")" + " : " + F(i) + " : " + (F(i + 1) - F(i)));
        //     }
        //
        //     Console.WriteLine(string.Join(",", test));
        //
        //     // Console.WriteLine(M(Int32.MaxValue));
        //     // for (var i = 0; i < 40; i++)
        //     // {
        //     //     Console.WriteLine("M2(" + i + ")" + " : " + M2(i) + " : " + (i - M2(i)));
        //     // }
        // }

        public static int F(int n)
        {
            var f = new[]
            {
                1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 13, 13, 14, 14, 15, 16, 16, 17, 17, 18,
                19, 19, 20, 21, 21, 22, 22, 23, 24, 24, 25, 25, 26, 27, 27, 28, 29, 29, 30, 30, 31, 32, 32, 33, 34, 34,
                35, 35, 36, 37, 37, 38, 38, 39, 40, 40, 41, 42, 42, 43, 43, 44, 45, 45, 46, 46, 47, 48, 48, 49, 50, 50,
                51, 51, 52, 53, 53, 54, 55, 55, 56, 56, 57, 58, 58, 59, 59, 60, 61, 61, 62, 63, 63, 64, 64, 65, 66, 66,
                67, 67, 68, 69, 69, 70, 71, 71, 72, 72, 73, 74, 74, 75, 76, 76, 77, 77, 78, 79, 79, 80, 80, 81, 82, 82,
                83, 84, 84, 85, 85, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 92, 93, 93, 94, 95, 95, 96, 97, 97, 98, 98,
                99, 100, 100, 101, 101, 102, 103, 103, 104, 105
            };
            return f[n];
        }

        public static int M(int n)
        {
            var m = new[]
            {
                0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 17, 18,
                19, 19, 20, 20, 21, 22, 22, 23, 24, 24, 25, 25, 26, 27, 27, 28, 29, 29, 30, 30, 31, 32, 32, 33, 33, 34,
                35, 35, 36, 37, 37, 38, 38, 39, 40, 40, 41, 42, 42, 43, 43, 44, 45, 45, 46, 46, 47, 48, 48, 49, 50, 50,
                51, 51, 52, 53, 53, 54, 54, 55, 56, 56, 57, 58, 58, 59, 59, 60, 61, 61, 62, 63, 63, 64, 64, 65, 66, 66,
                67, 67, 68, 69, 69, 70, 71, 71, 72, 72, 73, 74, 74, 75, 76, 76, 77, 77, 78, 79, 79, 80, 80, 81, 82, 82,
                83, 84, 84, 85, 85, 86, 87, 87, 88, 88, 89, 90, 90, 91, 92, 92, 93, 93, 94, 95, 95, 96, 97, 97, 98, 98,
                99, 100, 100, 101, 101, 102, 103, 103, 104, 105
            };
            return m[n];
        }





        // public static int F(int n)
        // {
        //     if (n <= 0)
        //         return 1;
        //     return n - M(F(n - 1));
        // }
        //
        // public static int M(int n)
        // {
        //     if (n <= 0)
        //         return 0;
        //     return n - F(M(n - 1));
        // }










        // public static int F(int n)
        // {
        //     var sum = 1;
        //     var toggle = false;
        //     for (var i = 0; i < n; i++)
        //     {
        //         if (toggle == false)
        //         {
        //             sum--;
        //             toggle = true;
        //             continue;
        //         }
        //         sum += 2;
        //         toggle = false;
        //     }
        //     return sum;
        // }
        //
        // public static int M(int n)
        // {
        //     if(n == 0) return 0;
        //     return n - F(M(n - 1));
        // }
        //
        //
        //
        // int f(int n, int i)
        // {
        //     return n>0?n-f(f(n-1,i),-i):i>0?1:0;
        // }
        //
        // void p(int n, int i)
        // {
        //     if(n>0)p(n-1,i);
        //     Console.WriteLine((i == 0 ? "\n" : f(n, i) + " "));
        //
        // }
        //
        // void p(int n)
        // {
        //     p(n,1);
        //     p(0,0);
        //     p(n,-1);
        // }








        // public static int F2(int n)
        // {
        //     if(n == 0) return 1;
        //     return n - M2(F2(n - 1));
        // }
        //
        // public static int M2(int n)
        // {
        //     if(n == 0) return 0;
        //     return n - F2(M2(n - 1));
        // }
    }
}