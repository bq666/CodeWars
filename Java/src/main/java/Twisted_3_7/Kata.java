package Twisted_3_7;

import javax.xml.crypto.dsig.spec.XSLTTransformParameterSpec;
import java.util.Arrays;
import java.util.stream.Stream;

public class Kata {

	public static void main(String[] args) {
		Kata test = new Kata();
		System.out.println(convert("KOCHANA PATRYCJO I EWO, DZIEKUJEMY WAM Z CALEGO SERCA ZA PIEKNY PREZENT, CUDOWNE ZYCZENIA SLUBNE ORAZ WASZA OBECNOSC W TYM NAJSZCZESLIWSZYM DLA NAS DNIU. SPRAWILYSCIE NAM OGROMNA RADOSC ZOSTAJAC SWIADKAMI NA NASZYM SLUBIE, ORAZ OPITALAJAC RAZEM Z NAMI, BADZ CO BADZ PRZYSTAWKE ALE JEDNAK :) "));

		System.out.println(test.numberOfTickets(100000, 999999));
		System.out.println(convert
	}

	private static boolean convert2(String s) {
		String[] out = s.split(" ");
		for (String ss : out) {
			System.out.println(Character.valueOf((char) Integer.parseInt(ss, 2)));
		}
		return true;
	}

	private static String convert(String s) {
		StringBuilder out = new StringBuilder();
		for (char c : s.toCharArray()) {
			String out2 = "00000000" + Integer.toBinaryString(c);
			out.append(out2.substring(out2.length() - 8));
			out.append(" ");
		}
		return out.toString();
	}


	public int numberOfTickets(int from, int to) {
		int out = 0;
		for (int i = from; i <= to; i++) {
			String ticket = String.valueOf(i);
			if ((ticket.charAt(0) + ticket.charAt(1) + ticket.charAt(2)) == (ticket.charAt(3) + ticket.charAt(4) + ticket.charAt(5))) {
				out++;
			}
		}
		return out;
	}

	public static Integer[] sortTwisted37(Integer[] array) {
		Integer[] out = array.clone();
		out = swap(out);
		Arrays.sort(out);
		out = swap(out);
		return out;
	}

	private static Integer[] swap(Integer[] out) {
		out = Arrays.stream(out)
				.map(String::valueOf)
				.map(i -> i.replaceAll("3", "a"))
				.map(i -> i.replaceAll("7", "3"))
				.map(i -> i.replaceAll("a", "7"))
				.mapToInt(Integer::parseInt).boxed().toArray(Integer[]::new);
		return out;
	}
}